name: "Cleanup Redundant PRs and Branches from CD Automation"
author: "@GlueOps"
description: "GlueOps can use PRs to approve Continuous Deployment.  This action closes redundant PRs and deletes the associated branches."
branding:
  icon: 'trash-2'
  color: 'yellow'



inputs:
  pr_number:
    description: "Pull Request Number"
    required: true
    type: number
  gh_token:
    description: "GitHub token for gh cli"
    required: true
  gh_cli_version:
    description: "The version of the gh cli to install"
    required: false
    default: "2.42.0"
  jq_version:
    description: "The version of jq to install"
    required: false
    default: "1.7.1"

runs:
  using: "composite"
  steps:
  - name: Checkout code
    uses: actions/checkout@v3

  - name: Install gh and jq
    shell: bash
    run: |
      echo "::group::installing gh cli and jq..."
      sudo apt update
      sudo apt install -y wget
      wget https://github.com/cli/cli/releases/download/v${{ inputs.gh_cli_version }}/gh_${{ inputs.gh_cli_version }}_linux_amd64.deb
      sudo dpkg -i gh_${{ inputs.gh_cli_version }}_linux_amd64.deb
      wget https://github.com/jqlang/jq/releases/download/jq-${{ inputs.jq_version }}/jq-linux-amd64
      sudo mv jq-linux-amd64 /usr/bin/jq
      sudo chmod +x /usr/bin/jq
      echo "::endgroup::"

  - name: Execute Script to Close Redundant PRs and Delete Branches
    shell: bash
    env:
      GITHUB_PR_NUMBER: ${{ inputs.pr_number }}
      GH_TOKEN: ${{ inputs.gh_token }}
    run: |
      parse_pr_headRefName() {
          local headRefName=$1
          local app_name=$(echo $headRefName | cut -d'/' -f1)
          local temp=$(echo $headRefName | cut -d'/' -f2-)
          local environment=$(echo $temp | cut -d'-' -f2)
          local tag=$(echo $headRefName | rev | cut -d'-' -f1 | rev)
          echo $app_name $environment $tag
      }

      close_pr_and_delete_branch() {
          local pr_number=$1
          local branch_name=$2

          gh pr close $pr_number

          gh api -X DELETE repos/:owner/:repo/git/refs/heads/$branch_name
      }

      main() {
          trigger_pr_number=$1
          trigger_pr=$(gh pr view $trigger_pr_number --json headRefName)
          trigger_pr_branch=$(echo $trigger_pr | jq -r '.headRefName')
          read trigger_pr_app_name trigger_pr_environment trigger_pr_tag <<< $(parse_pr_headRefName "$trigger_pr_branch")

          open_prs=$(gh pr list --state open --json number,headRefName)

          echo "$open_prs" | jq -c '.[]' | while read pr; do
              open_pr_number=$(echo $pr | jq -r '.number')
              open_pr_branch=$(echo $pr | jq -r '.headRefName')
              read open_pr_app_name open_pr_environment open_pr_tag <<< $(parse_pr_headRefName "$open_pr_branch")

              if [ "$trigger_pr_app_name" == "$open_pr_app_name" ] && [ "$trigger_pr_environment" == "$open_pr_environment" ] && [ "$trigger_pr_tag" != "$open_pr_tag" ] && [ $trigger_pr_number -gt $open_pr_number ]; then
                  close_pr_and_delete_branch $open_pr_number $open_pr_branch
              fi
          done
      }

      echo "::group::cleaning up redundant PRs and branches"
      main $GITHUB_PR_NUMBER
      echo "::endgroup::"
